<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lua on Gleb Zakharov</title><link>https://snyssfx.github.io/tags/lua/</link><description>Recent content in lua on Gleb Zakharov</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 05 Apr 2021 14:31:48 +0300</lastBuildDate><atom:link href="https://snyssfx.github.io/tags/lua/index.xml" rel="self" type="application/rss+xml"/><item><title>lua programming trick for neovim scripting</title><link>https://snyssfx.github.io/posts/neovim-init-lua-scripting/</link><pubDate>Mon, 05 Apr 2021 14:31:48 +0300</pubDate><guid>https://snyssfx.github.io/posts/neovim-init-lua-scripting/</guid><description>TL;DR you can generate ctags for go-to-definition in lua code and explore sources for better, for example, lsp configuring.
You can&amp;rsquo;t go-to-definition with sumneko and other language servers for lua.
The instruction of how to use ctags is below.
Introduction and lua I&amp;rsquo;d like to share the one trick for neovim programming.
Recently I&amp;rsquo;ve found out that you can rewrite (almost) all your neovim scripting code to lua language.</description></item></channel></rss>